// packet.h -- common packet definition

#include <endian.h>

struct sync_message
{
	// should be generated by client, and server bump it up by 1 in reply
	uint64_t seq;

	// All timestamps in ns -- good until year 2262.
	uint64_t t1;	// timestamp the ping was sent 
	uint64_t t2;	// timestamp the ping was received
	uint64_t t3;	// timestamp the pong was sent
	uint64_t t4;	// timestamp the pong was received

	uint64_t server_ticks;
	uint64_t time_to_fire;

	char extra_msg[256]; // what every message you want to carry, not used.

	uint64_t oneway_delay() {
		return ((t4 - t1) - (t3 - t2)) / 2;
	}

	// convert from host order to network order(big endian)
	void hton() {
		seq = htobe64(seq);
		t1 = htobe64(t1);
		t2 = htobe64(t2);
		t3 = htobe64(t3);
		t4 = htobe64(t4);
		server_ticks = htobe64(server_ticks);
		time_to_fire = htobe64(time_to_fire);
	}

	// convert from network order to host order
	void ntoh() {
		seq = be64toh(seq);
		t1 = be64toh(t1);
		t2 = be64toh(t2);
		t3 = be64toh(t3);
		t4 = be64toh(t4);
		server_ticks = be64toh(server_ticks);
		time_to_fire = be64toh(time_to_fire);
	}

	void dump()
	{
		std::cout << "seq: " << seq << ", "
			<< "T1: " << t1 << ", "
			<< "T2: " << t2 << ", "
			<< "T3: " << t3 << ", "
			<< "T4: " << t4 << ", "
			<< "network delay: " << oneway_delay() << ", "
			<< "server tick: " << server_ticks << ", "
			<< "time_to_fire: " << time_to_fire
			<< std::endl;
	}
};
